{"version":3,"sources":["components/Todo.js","components/Form.js","App.jsx","index.js"],"names":["ToDo","props","className","id","type","defaultChecked","completed","onChange","toggleTask","htmlFor","name","onClick","deleteTask","ButtonForm","useState","setName","onSubmit","e","preventDefault","addTask","autoComplete","value","target","placeholder","App","tasks","setTasks","updatedTasks","map","task","remainingTasks","filter","taskList","Heading","headingText","length","newTask","nanoid","ReactDOM","render","tests","document","getElementById"],"mappings":"8OA4BeA,EA5BF,SAACC,GACb,OACC,sBAAKC,UAAU,iBAAf,UACC,sBAAKA,UAAU,cAAf,UACC,uBACCC,GAAIF,EAAME,GACVC,KAAK,WACLC,eAAgBJ,EAAMK,UACtBC,SAAU,kBAAMN,EAAMO,WAAWP,EAAME,OAExC,uBAAOD,UAAU,aAAaO,QAASR,EAAME,GAA7C,SACEF,EAAMS,OAER,oBAAIR,UAAU,kBAEf,qBAAKA,UAAU,UAAf,SACC,wBACCE,KAAK,SACLF,UAAU,gBACVS,QAAS,kBAAMV,EAAMW,WAAWX,EAAME,KAHvC,0BCkBWU,EAhCI,SAACZ,GAAW,IAAD,EACLa,mBAAS,IADJ,mBACtBJ,EADsB,KAChBK,EADgB,KAU7B,OACC,uBAAMC,SANc,SAACC,GACrBA,EAAEC,iBACFjB,EAAMkB,QAAQT,GACdK,EAAQ,KAGR,UACC,oBAAIb,UAAU,cAAcO,QAAQ,iBAApC,2BAGA,uBACCL,KAAK,OACLD,GAAG,iBACHD,UAAU,QACVQ,KAAK,OACLU,aAAa,MACbC,MAAOX,EACPH,SApBkB,SAACU,GACrBF,EAAQE,EAAEK,OAAOD,QAoBfE,YAAY,gBAEb,wBAAQnB,KAAK,SAASF,UAAU,gBAAhC,qBCqBYsB,EA1CH,WAAO,IAAD,EACSV,mBAAS,IADlB,mBACVW,EADU,KACHC,EADG,KAMXlB,EAAa,SAACL,GACnB,IAAMwB,EAAeF,EAAMG,KAAI,SAACC,GAC/B,OAAI1B,IAAO0B,EAAK1B,GACR,2BAAK0B,GAAZ,IAAkBvB,WAAYuB,EAAKvB,YAE7BuB,KAERH,EAASC,IAEJf,EAAa,SAACT,GACnB,IAAM2B,EAAiBL,EAAMM,QAAO,SAACF,GAAD,OAAU1B,IAAO0B,EAAK1B,MAC1DuB,EAASI,IAEJE,EAAWP,EAAMG,KAAI,SAACC,GAAD,OAC1B,cAAC,EAAD,CACC1B,GAAI0B,EAAK1B,GACTO,KAAMmB,EAAKnB,KACXJ,UAAWuB,EAAKvB,UAEhBM,WAAYA,EACZJ,WAAYA,GAFPqB,EAAK1B,OAKN8B,EAAU,WACf,IAAMC,EAAW,UAAMF,EAASG,OAAf,oBACjB,OAAO,oBAAIjC,UAAU,SAAd,SAAwBgC,KAEhC,OACC,sBAAKhC,UAAU,iBAAf,UACC,cAAC+B,EAAD,IACA,oBAAI/B,UAAU,YAAd,SAA2B8B,IAC3B,cAAC,EAAD,CAAYb,QAnCE,SAACT,GAChB,IAAM0B,EAAU,CAAEjC,GAAI,QAAUkC,cAAU3B,KAAMA,EAAMJ,WAAW,GACjEoB,EAAS,GAAD,mBAAKD,GAAL,CAAYW,YCCtBE,IAASC,OAAO,cAAC,EAAD,CAAKC,MAAO,KAAQC,SAASC,eAAe,W","file":"static/js/main.7dda281c.chunk.js","sourcesContent":["const ToDo = (props) => {\n\treturn (\n\t\t<div className=\"todo-container\">\n\t\t\t<div className=\"check-boxes\">\n\t\t\t\t<input\n\t\t\t\t\tid={props.id}\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tdefaultChecked={props.completed}\n\t\t\t\t\tonChange={() => props.toggleTask(props.id)}\n\t\t\t\t/>\n\t\t\t\t<label className=\"todo-label\" htmlFor={props.id}>\n\t\t\t\t\t{props.name}\n\t\t\t\t</label>\n\t\t\t\t<li className=\"to-do-item\"></li>\n\t\t\t</div>\n\t\t\t<div className=\"buttons\">\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"delete-button\"\n\t\t\t\t\tonClick={() => props.deleteTask(props.id)}\n\t\t\t\t>\n\t\t\t\t\tDelete\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ToDo;\n","import React, { useState } from \"react\";\n\nconst ButtonForm = (props) => {\n\tconst [name, setName] = useState(\"\");\n\tconst handleChange = (e) => {\n\t\tsetName(e.target.value);\n\t};\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tprops.addTask(name);\n\t\tsetName(\"\");\n\t};\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<h2 className=\"form-header\" htmlFor=\"new-todo-input\">\n\t\t\t\tAdd new task:\n\t\t\t</h2>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tid=\"new-todo-input\"\n\t\t\t\tclassName=\"input\"\n\t\t\t\tname=\"text\"\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tvalue={name}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tplaceholder=\"New task...\"\n\t\t\t/>\n\t\t\t<button type=\"submit\" className=\"submit-button\">\n\t\t\t\tAdd\n\t\t\t</button>\n\t\t</form>\n\t);\n};\n\nexport default ButtonForm;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport ToDo from \"./components/Todo\";\nimport ButtonForm from \"./components/Form\";\n\nconst App = () => {\n\tconst [tasks, setTasks] = useState([]);\n\tconst addTask = (name) => {\n\t\tconst newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n\t\tsetTasks([...tasks, newTask]);\n\t};\n\tconst toggleTask = (id) => {\n\t\tconst updatedTasks = tasks.map((task) => {\n\t\t\tif (id === task.id) {\n\t\t\t\treturn { ...task, completed: !task.completed };\n\t\t\t}\n\t\t\treturn task;\n\t\t});\n\t\tsetTasks(updatedTasks);\n\t};\n\tconst deleteTask = (id) => {\n\t\tconst remainingTasks = tasks.filter((task) => id !== task.id);\n\t\tsetTasks(remainingTasks);\n\t};\n\tconst taskList = tasks.map((task) => (\n\t\t<ToDo\n\t\t\tid={task.id}\n\t\t\tname={task.name}\n\t\t\tcompleted={task.completed}\n\t\t\tkey={task.id}\n\t\t\tdeleteTask={deleteTask}\n\t\t\ttoggleTask={toggleTask}\n\t\t/>\n\t));\n\tconst Heading = () => {\n\t\tconst headingText = `${taskList.length} tasks remaining`;\n\t\treturn <h1 className=\"header\">{headingText}</h1>;\n\t};\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t<Heading />\n\t\t\t<ul className=\"todo-list\">{taskList}</ul>\n\t\t\t<ButtonForm addTask={addTask} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// const INITIAL_TASKS = [\n// \t{ id: \"todo-0\", name: \"Coffee\", completed: false },\n// \t{ id: \"todo-1\", name: \"Breakfast\", completed: false },\n// \t{ id: \"todo-2\", name: \"Code\", completed: false },\n// ];\n\nReactDOM.render(<App tests={[]} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}